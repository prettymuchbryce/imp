var Imp=function(){var a=!1;this.setProductionMode=function(){a=!0},this.lements=function(c,d){setTimeout(function(){b(c,d,!a)},1)},this.doesImplement=function(a,c){return b(a,c)};var b=function(a,b,c){if(!a||!a.methods)throw"Invalid interface declaration. See documentation.";for(var d=[],e=0;e<a.methods.length;e++){var f=a.methods[e].name;if(b[f]){paramNames=Imp.utils.getParamNames(b[f]);var g=[];a.methods[e].params&&(g=a.methods[e].params),Imp.utils.compareArrays(g,paramNames)||d.push("imp: Incompatible method signature for method "+f+".")}else d.push("imp: Method "+f+" must be defined in order to implement this interface.")}if(d.length>0)for(var e=0;e<d.length;e++){if(c)throw d[e];return!1}return!0};return this}();Imp.utils=function(){return this.getParamNames=function(a){var b=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,c=a.toString().replace(b,""),d=c.slice(c.indexOf("(")+1,c.indexOf(")")).match(/([^\s,]+)/g);return null===d&&(d=[]),d},this.compareArrays=function(a,b){if(!b)return!1;if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]instanceof Array&&b[c]instanceof Array){if(!a[c].compare(b[c]))return!1}else if(a[c]!=b[c])return!1;return!0},this}();